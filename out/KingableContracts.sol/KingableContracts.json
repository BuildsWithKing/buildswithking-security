{"abi":[{"type":"function","name":"currentKing","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"isKing","inputs":[{"name":"_kingAddress","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"renounceKingship","inputs":[],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"transferKingshipTo","inputs":[{"name":"_newKingAddress","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"event","name":"KingshipRenounced","inputs":[{"name":"_oldKingAddress","type":"address","indexed":true,"internalType":"address"},{"name":"_zeroAddress","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"KingshipTransferred","inputs":[{"name":"_oldKingAddress","type":"address","indexed":true,"internalType":"address"},{"name":"_newKingAddress","type":"address","indexed":true,"internalType":"address"}],"anonymous":false},{"type":"error","name":"InvalidKing","inputs":[{"name":"_invalidAddress","type":"address","internalType":"address"}]},{"type":"error","name":"SameKing","inputs":[{"name":"_king","type":"address","internalType":"address"}]},{"type":"error","name":"Unauthorized","inputs":[{"name":"_user","type":"address","internalType":"address"},{"name":"_king","type":"address","internalType":"address"}]}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"currentKing()":"f5b45714","isKing(address)":"c91c9cfe","renounceKingship()":"de98d4b3","transferKingshipTo(address)":"859c38de"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_invalidAddress\",\"type\":\"address\"}],\"name\":\"InvalidKing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_king\",\"type\":\"address\"}],\"name\":\"SameKing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_king\",\"type\":\"address\"}],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_oldKingAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_zeroAddress\",\"type\":\"address\"}],\"name\":\"KingshipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_oldKingAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newKingAddress\",\"type\":\"address\"}],\"name\":\"KingshipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"currentKing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_kingAddress\",\"type\":\"address\"}],\"name\":\"isKing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceKingship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newKingAddress\",\"type\":\"address\"}],\"name\":\"transferKingshipTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Abstract contract, to be inherited by other contracts that require contract-based access control.\",\"errors\":{\"InvalidKing(address)\":[{\"details\":\"Thrown when the king tries transferring kingship to an EOAs (code length = 0), zero, or this contract address.\",\"params\":{\"_invalidAddress\":\"The invalid address.\"}}],\"SameKing(address)\":[{\"details\":\"Thrown when the king tries transferring kingship to self.\",\"params\":{\"_king\":\"The king's address.\"}}],\"Unauthorized(address,address)\":[{\"details\":\"Thrown when a user tries performing the king's only operation.\",\"params\":{\"_king\":\"The king's address.\",\"_user\":\"The user's address.\"}}]},\"events\":{\"KingshipRenounced(address,address)\":{\"params\":{\"_oldKingAddress\":\"The old king's address.\",\"_zeroAddress\":\"Always the zero address (indicates renouncement).\"}},\"KingshipTransferred(address,address)\":{\"params\":{\"_newKingAddress\":\"The new king's address.\",\"_oldKingAddress\":\"The old king's address.\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Reverts if `_kingAddress` is the zero, an EOA, or this contract address.\",\"params\":{\"_kingAddress\":\"The king's address.\"}},\"currentKing()\":{\"returns\":{\"_0\":\"The current king's address.\"}},\"isKing(address)\":{\"returns\":{\"_0\":\"`true` if address is the king, otherwise `false`.\"}},\"transferKingshipTo(address)\":{\"details\":\"Reverts if _newKingAddress is the zero, any EOA, this contract, or the same as the current king's address.\",\"params\":{\"_newKingAddress\":\"The new king's contract address.\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"InvalidKing(address)\":[{\"notice\":\"Thrown for invalid addresses (Zero, EOAs, or this contract address).\"}],\"SameKing(address)\":[{\"notice\":\"Thrown for the same king's address.\"}],\"Unauthorized(address,address)\":[{\"notice\":\"Thrown when the caller is not the king.\"}]},\"events\":{\"KingshipRenounced(address,address)\":{\"notice\":\"Emitted when the king renounces kingship.\"},\"KingshipTransferred(address,address)\":{\"notice\":\"Emitted when the king transfers kingship.\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Deploys with an initial contract-only king.\"},\"currentKing()\":{\"notice\":\"Returns the current king's address.\"},\"isKing(address)\":{\"notice\":\"Checks if the given address is the current king.\"},\"renounceKingship()\":{\"notice\":\"Renounces Kingship to the zero address.\"},\"transferKingshipTo(address)\":{\"notice\":\"Transfers kingship to another contract.\"}},\"notice\":\"Created on the 22nd of Sept, 2025.         This contract sets the king at deployment (Initial king must be a contract, EOAs are disallowed),            restricts access to some functions with the modifier \\\"onlyKing\\\".         Allows the king transfer kingship to contract addresses, and renounce kingship to the zero address         (which makes the contract kingless).\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/access/extensions/KingableContracts.sol\":\"KingableContracts\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/access/extensions/KingableContracts.sol\":{\"keccak256\":\"0x3d1e6cb7f68a685ba9fdf4e7fd5297188ea148786b3d36b7b9144f5fb31e1bf5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2fe4de0ab24f91fe35080320fa9343751ba36ecd75bec1d7ada527988e41a564\",\"dweb:/ipfs/QmaoT5gbnLDPi6J3udXy9EmdNXUDW3XHNQ5okQ9ugrfcrn\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.30+commit.73712a01"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"_invalidAddress","type":"address"}],"type":"error","name":"InvalidKing"},{"inputs":[{"internalType":"address","name":"_king","type":"address"}],"type":"error","name":"SameKing"},{"inputs":[{"internalType":"address","name":"_user","type":"address"},{"internalType":"address","name":"_king","type":"address"}],"type":"error","name":"Unauthorized"},{"inputs":[{"internalType":"address","name":"_oldKingAddress","type":"address","indexed":true},{"internalType":"address","name":"_zeroAddress","type":"address","indexed":false}],"type":"event","name":"KingshipRenounced","anonymous":false},{"inputs":[{"internalType":"address","name":"_oldKingAddress","type":"address","indexed":true},{"internalType":"address","name":"_newKingAddress","type":"address","indexed":true}],"type":"event","name":"KingshipTransferred","anonymous":false},{"inputs":[],"stateMutability":"view","type":"function","name":"currentKing","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[{"internalType":"address","name":"_kingAddress","type":"address"}],"stateMutability":"view","type":"function","name":"isKing","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[],"stateMutability":"nonpayable","type":"function","name":"renounceKingship"},{"inputs":[{"internalType":"address","name":"_newKingAddress","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"transferKingshipTo"}],"devdoc":{"kind":"dev","methods":{"constructor":{"details":"Reverts if `_kingAddress` is the zero, an EOA, or this contract address.","params":{"_kingAddress":"The king's address."}},"currentKing()":{"returns":{"_0":"The current king's address."}},"isKing(address)":{"returns":{"_0":"`true` if address is the king, otherwise `false`."}},"transferKingshipTo(address)":{"details":"Reverts if _newKingAddress is the zero, any EOA, this contract, or the same as the current king's address.","params":{"_newKingAddress":"The new king's contract address."}}},"version":1},"userdoc":{"kind":"user","methods":{"constructor":{"notice":"Deploys with an initial contract-only king."},"currentKing()":{"notice":"Returns the current king's address."},"isKing(address)":{"notice":"Checks if the given address is the current king."},"renounceKingship()":{"notice":"Renounces Kingship to the zero address."},"transferKingshipTo(address)":{"notice":"Transfers kingship to another contract."}},"version":1}},"settings":{"remappings":[],"optimizer":{"enabled":false,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"contracts/access/extensions/KingableContracts.sol":"KingableContracts"},"evmVersion":"cancun","libraries":{}},"sources":{"contracts/access/extensions/KingableContracts.sol":{"keccak256":"0x3d1e6cb7f68a685ba9fdf4e7fd5297188ea148786b3d36b7b9144f5fb31e1bf5","urls":["bzz-raw://2fe4de0ab24f91fe35080320fa9343751ba36ecd75bec1d7ada527988e41a564","dweb:/ipfs/QmaoT5gbnLDPi6J3udXy9EmdNXUDW3XHNQ5okQ9ugrfcrn"],"license":"MIT"}},"version":1},"id":3}