{"abi":[{"type":"function","name":"currentKing","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"isKing","inputs":[{"name":"_kingAddress","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"renounceKingship","inputs":[],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"transferKingshipTo","inputs":[{"name":"_newKingAddress","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"event","name":"KingshipRenounced","inputs":[{"name":"_oldKingAddress","type":"address","indexed":true,"internalType":"address"},{"name":"_zeroAddress","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"KingshipTransferred","inputs":[{"name":"_oldKingAddress","type":"address","indexed":true,"internalType":"address"},{"name":"_newKingAddress","type":"address","indexed":true,"internalType":"address"}],"anonymous":false},{"type":"error","name":"InvalidKing","inputs":[{"name":"_invalidAddress","type":"address","internalType":"address"}]},{"type":"error","name":"SameKing","inputs":[{"name":"_king","type":"address","internalType":"address"}]},{"type":"error","name":"Unauthorized","inputs":[{"name":"_user","type":"address","internalType":"address"},{"name":"_king","type":"address","internalType":"address"}]}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"currentKing()":"f5b45714","isKing(address)":"c91c9cfe","renounceKingship()":"de98d4b3","transferKingshipTo(address)":"859c38de"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_invalidAddress\",\"type\":\"address\"}],\"name\":\"InvalidKing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_king\",\"type\":\"address\"}],\"name\":\"SameKing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_king\",\"type\":\"address\"}],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_oldKingAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_zeroAddress\",\"type\":\"address\"}],\"name\":\"KingshipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_oldKingAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newKingAddress\",\"type\":\"address\"}],\"name\":\"KingshipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"currentKing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_kingAddress\",\"type\":\"address\"}],\"name\":\"isKing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceKingship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newKingAddress\",\"type\":\"address\"}],\"name\":\"transferKingshipTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Abstract contract, to be inherited by other contracts that require king-based access control.\",\"errors\":{\"InvalidKing(address)\":[{\"details\":\"Thrown when the king tries transferring kingship to the zero or any contract address.\",\"params\":{\"_invalidAddress\":\"The invalid address.\"}}],\"SameKing(address)\":[{\"details\":\"Thrown when the king tries transferring kingship to self.\",\"params\":{\"_king\":\"The king's address.\"}}],\"Unauthorized(address,address)\":[{\"details\":\"Thrown when a user tries performing the king's only operation.\",\"params\":{\"_king\":\"The king's address.\",\"_user\":\"The user's address.\"}}]},\"events\":{\"KingshipRenounced(address,address)\":{\"params\":{\"_oldKingAddress\":\"The old king's address.\",\"_zeroAddress\":\"Always the zero address (indicates renouncement).\"}},\"KingshipTransferred(address,address)\":{\"params\":{\"_newKingAddress\":\"The new king's address.\",\"_oldKingAddress\":\"The old king's address.\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Reverts if `_kingAddress` is any contract, the zero or this contract address.\",\"params\":{\"_kingAddress\":\"The king's address.\"}},\"currentKing()\":{\"returns\":{\"_0\":\"The current king's address.\"}},\"isKing(address)\":{\"returns\":{\"_0\":\"`true` if address is the king, otherwise `false`.\"}},\"transferKingshipTo(address)\":{\"params\":{\"_newKingAddress\":\"The new king's address.\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"InvalidKing(address)\":[{\"notice\":\"Thrown for invalid addresses (zero or contract addresses).\"}],\"SameKing(address)\":[{\"notice\":\"Thrown for the same king's address.\"}],\"Unauthorized(address,address)\":[{\"notice\":\"Thrown when caller is not the king.\"}]},\"events\":{\"KingshipRenounced(address,address)\":{\"notice\":\"Emitted when the king renounces kingship.\"},\"KingshipTransferred(address,address)\":{\"notice\":\"Emitted when the king transfers kingship.\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Deploys with EOAs as the initial king.\"},\"currentKing()\":{\"notice\":\"Returns the current king's address.\"},\"isKing(address)\":{\"notice\":\"Checks if the given address is the current king.\"},\"renounceKingship()\":{\"notice\":\"Renounces kingship to the zero address.\"},\"transferKingshipTo(address)\":{\"notice\":\"Transfers kingship to EOAs only.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/access/extensions/KingableEOAs.sol\":\"KingableEOAs\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/access/extensions/KingableEOAs.sol\":{\"keccak256\":\"0x4f555527b148472c11260a0c6f068b39adb50d12de2667c816c95a7f1f9fb578\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6b84a010234b70beb5d753723526fccc3dad77fea3a1bb3d1ee8dde5bb504af0\",\"dweb:/ipfs/Qmduc5iyVaFyLwwJuBRHxKixVv9bNojTeQxorFLnVe9VJb\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.30+commit.73712a01"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"_invalidAddress","type":"address"}],"type":"error","name":"InvalidKing"},{"inputs":[{"internalType":"address","name":"_king","type":"address"}],"type":"error","name":"SameKing"},{"inputs":[{"internalType":"address","name":"_user","type":"address"},{"internalType":"address","name":"_king","type":"address"}],"type":"error","name":"Unauthorized"},{"inputs":[{"internalType":"address","name":"_oldKingAddress","type":"address","indexed":true},{"internalType":"address","name":"_zeroAddress","type":"address","indexed":false}],"type":"event","name":"KingshipRenounced","anonymous":false},{"inputs":[{"internalType":"address","name":"_oldKingAddress","type":"address","indexed":true},{"internalType":"address","name":"_newKingAddress","type":"address","indexed":true}],"type":"event","name":"KingshipTransferred","anonymous":false},{"inputs":[],"stateMutability":"view","type":"function","name":"currentKing","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[{"internalType":"address","name":"_kingAddress","type":"address"}],"stateMutability":"view","type":"function","name":"isKing","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[],"stateMutability":"nonpayable","type":"function","name":"renounceKingship"},{"inputs":[{"internalType":"address","name":"_newKingAddress","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"transferKingshipTo"}],"devdoc":{"kind":"dev","methods":{"constructor":{"details":"Reverts if `_kingAddress` is any contract, the zero or this contract address.","params":{"_kingAddress":"The king's address."}},"currentKing()":{"returns":{"_0":"The current king's address."}},"isKing(address)":{"returns":{"_0":"`true` if address is the king, otherwise `false`."}},"transferKingshipTo(address)":{"params":{"_newKingAddress":"The new king's address."}}},"version":1},"userdoc":{"kind":"user","methods":{"constructor":{"notice":"Deploys with EOAs as the initial king."},"currentKing()":{"notice":"Returns the current king's address."},"isKing(address)":{"notice":"Checks if the given address is the current king."},"renounceKingship()":{"notice":"Renounces kingship to the zero address."},"transferKingshipTo(address)":{"notice":"Transfers kingship to EOAs only."}},"version":1}},"settings":{"remappings":[],"optimizer":{"enabled":false,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"contracts/access/extensions/KingableEOAs.sol":"KingableEOAs"},"evmVersion":"cancun","libraries":{}},"sources":{"contracts/access/extensions/KingableEOAs.sol":{"keccak256":"0x4f555527b148472c11260a0c6f068b39adb50d12de2667c816c95a7f1f9fb578","urls":["bzz-raw://6b84a010234b70beb5d753723526fccc3dad77fea3a1bb3d1ee8dde5bb504af0","dweb:/ipfs/Qmduc5iyVaFyLwwJuBRHxKixVv9bNojTeQxorFLnVe9VJb"],"license":"MIT"}},"version":1},"id":4}